#include <cstdlib>
#include <ctime>
#include <fstream>
#include <iostream>
#include <set>
#include <vector>

using namespace std;

string compile_cpp(const string& file_name) {
  string cpp_file = file_name + ".cpp";
  string output_file = file_name;
  std::cout << "Compiling " << cpp_file << endl;
  system(("g++ " + cpp_file + " -o " + output_file).c_str());
  return output_file;
}

void generate_input() {
  ofstream input_file("in");
  input_file << rand() % 10 + 1 << endl;
}

string generate_output(const string& executable) {
  system(("./" + executable + " < in > " + executable + ".out").c_str());
  ifstream output_file(executable + ".out");
  string output;
  getline(output_file, output);
  return output;
}

void clear(const vector<string>& files_to_clear) {
  string files_to_clear_str;
  for (const auto& file : files_to_clear)
    files_to_clear_str += file + " ";
  system(("rm " + files_to_clear_str).c_str());
}

bool are_equal(const vector<string>& output_list) {
  return set<string>(output_list.begin(), output_list.end()).size() == 1;
}

int main() {
  srand(static_cast<unsigned>(time(0)));
  // GIVEN the number of test cases and the file names
  int n_test_cases = 100;
  vector<string> file_names = {"wa", "ac"};
  vector<string> executables;
  // WHEN the outputs generated by both
  // executables on each test case are compared
  for (const auto& file_name : file_names)
      executables.push_back(compile_cpp(file_name));
  for (int test_case = 1; test_case <= n_test_cases; ++test_case) {
    std::cout << "Test Case " << test_case << ": ";
    generate_input();
    vector<string> outputs;
    for (const auto& executable : executables)
      outputs.push_back(generate_output(executable));
    if (!are_equal(outputs)) {
      std::cout << "WRONG ANSWER" << endl;
      clear(executables);
      return 0;
    }
    std::cout << "OK" << endl;
  }
  // THEN they should coincide and the final verdict must be Accepted
  std::cout << "ACCEPTED" << endl;
  vector<string> files_to_clear;
  files_to_clear.insert(files_to_clear.end(), file_names.begin(), file_names.end());
  vector<string> outputs;
  for (const string& executable : executables) outputs.push_back(executable + ".out");
  files_to_clear.insert(files_to_clear.end(), outputs.begin(), outputs.end());
  files_to_clear.push_back("a.out");
  files_to_clear.push_back("in");
  clear(files_to_clear);
  return 0;
}