from random import randint
from os import system
import sys

def compile_cpp(file):
    """Compile specified file and create executable"""
    system(f"echo Compiling {file}.cpp")
    system(f"g++ {file}.cpp -o {file}")

def generate_input():
    """Create input for a single test case"""
    sys.stdout = open("in", "w")
    print(randint(1, 100))
    sys.stdout = sys.__stdout__

def generate_output(file):
    """Generate output from specified executable"""
    system(f'./{file} < in > {file}.out')
    output = open(f'{file}.out', "r").read().strip()
    return output

def generate_outputs(files):
    outputs = []
    for file in files:
        output = generate_output(file)
        outputs.append(output)
    return outputs

def clear(files):
    """Remove specified files in current folder"""
    statement = "rm"
    for file in files:
        statement = statement + " " + file
    system(statement)

def are_equal(outputs):
    return len(set(outputs)) == 1

def wrong_answer(files):
    print("Wrong Answer")
    clear(files)
    exit(0)

def main():
    # GIVEN the number of test cases and the file names
    n_test_cases = 100
    files = ["wa", "ac"]
    executables = [f'{file}.out' for file in files]
    for file in files:
        compile_cpp(file)
    
    # WHEN the outputs generated by both executables on
    # each test case are compared
    for test_case in range(1, n_test_cases + 1):
        print(f'Test Case {test_case}: ', end="")
        generate_input()
        outputs = generate_outputs(files)
        if not are_equal(outputs):
            wrong_answer(files)
        print("Correct")

    # THEN they should coincide and
    # the final verdict must be Accepted
    print("Accepted")
    clear([*files, *executables, "in"])

if __name__ == "__main__":
    main()
